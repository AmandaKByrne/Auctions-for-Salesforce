<!-- 
// Written by David Habib, copyright (c) 2012 Groundwire, 1402 3rd Avenue, Suite 1000, Seattle, WA 98101
// This program is released under the GNU Affero General Public License, Version 3. http://www.gnu.org/licenses/
 -->

<apex:page controller="AUC_CTRL_AuctionCheckIn3"  title="Auction Check In"  >

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js" type="text/javascript"></script>
<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/themes/redmond/jquery-ui.css" type="text/css" />
	
<style>	
	
	/* this styling adds the vertical scrollbar to our autocomplete fields */
	.ui-autocomplete {
		max-height: 200px;
		overflow-y: auto;
		/* prevent horizontal scrollbar */
		overflow-x: hidden;
		/* add padding to account for vertical scrollbar */
		padding-right: 20px;
		font-size: 12px; 
		font-family: Arial, Helvetica, sans-serif;;
	}
	
	/* these styles are for the combobox dropdown button */
	.ui-button { margin-left: 0px; height: 1.8em; }
	.ui-button-icon-only .ui-button-text { padding: 0.35em; } 
	.ui-autocomplete-input { margin: 0; padding: 0.48em 0 0.47em 0.45em; }	
	
	.ui-widget-content { 
		background: white;
	}
	
	.clsWaitLeft { 
		background: url("//ajax.googleapis.com/ajax/libs/jqueryui/1.8.2/themes/base/images/ui-anim_basic_16x16.gif") left center no-repeat; 
	}

	.clsWaitRight { 
		background: url("//ajax.googleapis.com/ajax/libs/jqueryui/1.8.2/themes/base/images/ui-anim_basic_16x16.gif") right center no-repeat; 
	}
	
	.clsEditForm {
		font-size: 12px; 
		font-family: Arial, Helvetica, sans-serif;;
	}
	
	.clsCombo {
		font-size: 12px;
		font-family: Arial, Helvetica, sans-serif;;
		height: .85em;
		width: 150px;		
	}
	
	.clsTDEditForm {
		vertical-align: top;
	}

	.clsTDEditFormCombo {
		vertical-align: top;
		white-space: nowrap;
	}
	
	.clsTDHeaderEditForm {
		text-align: center;
		font-weight: bold;
	}
	
	.clsBtnEdit {
		font-size: 12px;
		font-family: Arial, Helvetica, sans-serif;;
		height: 24px;
		width: 150px;
	}
	
	.clsTxtEdit {
		font-family: Arial, Helvetica, sans-serif;;
		height:21px;
	}
	
	.clsTxtEditNotes {
		font-size: 12px;
		font-family: Arial, Helvetica, sans-serif;;
	}
	
	.clsDTEven {
		background: white;
	}
	
	.clsDTOdd {
		background: AliceBlue;
	}
	
	.clsDTHeader {
		background: LightSteelBlue;
		vertical-align: middle;
	}
	
	.hilite { 
		background: yellow; 
	}
	
	.clsAttendeeLink a {
		text-decoration: none;
	}
				
</style>
 
<script type="text/javascript">
    var j$ = jQuery.noConflict();
 	
    var listAttendees = null; // our cached list of all Attendees.
    var listCaptains = null; // our cached list of Captains for the current Auction.
    var auctionId = "{!auctionId}"; // the current Auction.
 	
	/*******************************************************************************************************
	* this function is called when the page loads
	********************************************************************************************************/
	j$(document).ready(function() {
		myInitializeJQueryUI('{!strNameAttendee}', '{!strNameCaptain}');
	});	
	
	/*******************************************************************************************************
	* the work hours to do all jQueryUI initialization (specifically setting up the autocompletes).
	********************************************************************************************************/
	function myInitializeJQueryUI(strNameAttendee, strNameCaptain) {
	
		
		/*******************************************************************************************************
   	 	* setup the Attendee autocomplete textbox
		*******************************************************************************************************/
		j$(".clsComboAttendees").autocomplete({
			minLength: 3,
			delay: 200,

		   	// focus called when the user hilights an item by arrowing or mousing over the list 
		   	// we needed to override this, otherwise the Id was displayed in the textbox.
		   	focus: function(event, ui) {
		   		j$(this).val(ui.item.label);
		   		return false;
		   	},
	   	})
		.data("autocomplete")._renderItem = function(ul, item) {
			return j$( "<li></li>" )
				.data("item.autocomplete", item)
				.append( '<a><b>' + item.label + '</b>' +
					'&nbsp;&nbsp;&nbsp;<i>' + strNull(item.contact.MailingStreet) + 
					(strNull(item.contact.MailingStreet)=='' ? '' : ', ') + strNull(item.contact.MailingCity) + '</i></a>' )
				.appendTo( ul );
		};	   	

		/*******************************************************************************************************
		* specify the specific fill function for Attendees
		*******************************************************************************************************/
		j$("#txtAttendees").autocomplete("option", "source",
			function(request, response) {
			
				//UNDONE: currently gets all Attendees, and filters in the browser.
				//consider doing the filtering on the server, and never caching the list.
			
				//if (listAttendees != null) {
				//	fillAndMatchAttendeesCombo(listAttendees, request, response);
				//} else 
					{			
	       			j$('#txtAttendees').addClass('clsWaitRight');	        			
					var strSearch = request.term.toLowerCase();		
					GW_Auctions.AUC_CTRL_AuctionCheckIn3.getListContacts(strSearch, function(result, event) {
						j$('#txtAttendees').removeClass('clsWaitRight');	        								
		        		if (event.type == 'exception') {
		        			alert(event.message);
		        		} else {
		        			if (result != null) {
		        				listAttendees = result;
								fillAndMatchAttendeesCombo(listAttendees, request, response);
			        		}
		        		}
			   		}, {escape:false});		   		
		   		}
		   	}
		);	
		
		/*******************************************************************************************************
		* given the list of Attendee, what is being searched for, and the response object,
		* fill in the response with the combo's items that match.
		*******************************************************************************************************/
		function fillAndMatchAttendeesCombo(listCons, request, response) {
			var strSearch = request.term.toLowerCase();		
 			var isMatch = false;
     		response(j$.map(listCons, function(item) {
     			var strLower = item.Name.toLowerCase();
   				if (strLower.indexOf(strSearch) >= 0) {
	   				// if we find the exact match, get its formal text and id.
	   				// ideally, we'd select it, but I couldn't figure out how!
	   				if (strLower == strSearch) {
	   					j$("#txtAttendees").val(item.Name).data('Id', item.Id);
	   					isMatch = true;
	   				}
   					return {label: item.Name, value: item.Id, contact: item};
   				}
   			}));
   			
   			// if we don't find a match for a real search, clear all the combos.
			if (!isMatch && strSearch != '') {
     			j$("#txtAttendees").data('Id', null);
     			//UNDONE: anything else to do?
			}	        														   
   			
		}

		/*******************************************************************************************************
		* specify the select event for Attendees, so it can update the controller to refresh the Attendee panel. 
		*******************************************************************************************************/
		j$('#txtAttendees').autocomplete("option", "select",
			function(event, ui) {
				var prevId = j$(this).data('Id');
				j$(this).val(ui.item.label).data('Id', ui.item.value);
		   		if (prevId != ui.item.value) {
		   			// call the controller to update the Attendee panel.
		   			ChangeAttendeeLookup(ui.item.value);			   		
			   	}
		   		return false;		   		 
		   	}
		);
		
		/*******************************************************************************************************
   	 	* setup the Ticket Holders autocomplete textbox
		*******************************************************************************************************/
		j$(".clsComboCaptains").autocomplete({
			minLength: 0,
			delay: 200,

		   	// focus called when the user hilights an item by arrowing or mousing over the list 
		   	// we needed to override this, otherwise the Id was displayed in the textbox.
		   	focus: function(event, ui) {
		   		j$(this).val(ui.item.label);
		   		return false;
		   	},
	   	});	   	

		/*******************************************************************************************************
		* specify the specific fill function for Captains
		* gets all ticket holders, and filters in the browser, since the list will be small enough.
		*******************************************************************************************************/
		j$("#txtCaptains").autocomplete("option", "source",
			function(request, response) {		
				// Gets all ticket holders, and filters in the browser, since the list will be small enough.
				if (listCaptains != null) {
					fillAndMatchCaptainsCombo(listCaptains, request, response);
				} else 
					{			
	       			j$('#txtCaptains').addClass('clsWaitRight');	        			
					var strSearch = request.term.toLowerCase();		
					GW_Auctions.AUC_CTRL_AuctionCheckIn3.getListCaptains(auctionId, '', function(result, event) {
						j$('#txtCaptains').removeClass('clsWaitRight');	        								
		        		if (event.type == 'exception') {
		        			alert(event.message);
		        		} else {
		        			if (result != null) {
		        				listCaptains = result;
								fillAndMatchCaptainsCombo(listCaptains, request, response);
			        		}
		        		}
			   		}, {escape:false});		   		
		   		}
		   	}
		);	
		
		/*******************************************************************************************************
		* given the list of contact, what is being searched for, and the response object,
		* fill in the response with the combo's items that match.
		*******************************************************************************************************/
		function fillAndMatchCaptainsCombo(listCons, request, response) {
			var strSearch = request.term.toLowerCase();		
 			var isMatch = false;
     		response(j$.map(listCons, function(item) {
     			var strLower = item.Name.toLowerCase();
   				if (strLower.indexOf(strSearch) >= 0) {
	   				// if we find the exact match, get its formal text and id.
	   				// ideally, we'd select it, but I couldn't figure out how!
	   				if (strLower == strSearch) {
	   					j$("#txtCaptains").val(item.Name).data('Id', item.Id);
	   					isMatch = true;
	   				}
   					return {label: item.Name, value: item.Id};
   				}
   			}));
   			
   			// if we don't find a match for a real search, clear all the combos.
			if (!isMatch && strSearch != '') {
     			j$("#txtCaptains").data('Id', null);
     			//UNDONE: anything else to do?
			}	        														   
   			
		}

		/*******************************************************************************************************
		* specify the select event for Ticket Holders, so it can cause the Attendee panel to refresh.
		*******************************************************************************************************/
		j$('#txtCaptains').autocomplete("option", "select",
			function(event, ui) {
				var prevId = j$(this).data('Id');
				j$(this).val(ui.item.label).data('Id', ui.item.value);
		   		if (prevId != ui.item.value) {
		   			// call the controller to update the Attendee panel.
		   			ChangeCaptainLookup(ui.item.value);			   		
			   	}
		   		return false;		   		 
		   	}
		);

			
		/*******************************************************************************************************
		* setup the button for showing all items		
		*******************************************************************************************************/
		j$(".clsBtnAll" )
					.attr( "tabIndex", -1 )
					.attr( "title", "Show Items" )
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.removeClass( "ui-corner-all" )
					.addClass( "ui-corner-right ui-button-icon" )
					.click(function() {
						// find our input textbox to our left
						var input = j$(this).prev('input');
						if (input.autocomplete( "option", "source" ) == null) return;
						// close if already visible
						if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
							input.autocomplete( "close" );
							return;
						}

						// work around a bug (likely same cause as #5265)
						j$( this ).blur();

						// pass current string as value to search for
						input.autocomplete( "search", strNull(input.val()) );
						input.focus();
					});	
		
		
		//UNDONE: how to get dt rows to have same class?
		// hiliting the row on hover
	    j$(".clsDTEven").hover(function() {
	    	j$(this).addClass("hilite");
	    }, function () {
	    	j$(this).removeClass("hilite");
	    });		

		// hiliting the row on hover
	    j$(".clsDTOdd").hover(function() {
	    	j$(this).addClass("hilite");
	    }, function () {
	    	j$(this).removeClass("hilite");
	    });	
	    
	    // if we have Attendee & captain names, use them.
	    j$('#txtCaptains').val(strNameCaptain);	
	    j$('#txtAttendees').val(strNameAttendee);	
	    	    
	} // end of myInitializeJQueryUI
	
	
	/*******************************************************************************************************
	* utility to deal with strings that might be null.
	*******************************************************************************************************/
	function strNull(str) {
		return (str == null ? '' : str);
	}

	/*******************************************************************************************************
	* helper function to select the specified contact from the Attendee table 
	*******************************************************************************************************/
	function selectContactIdAttendee(id, fPost) {
		var radio = j$('#radio'+id);
		if (radio != '') {
			radio.attr('checked', 'checked');
		}
		if (fPost == true) {
   			// call the controller to update the Attendee panel.
   			ChangeAttendeeSelected(id);			   		
		}
	}

	/*******************************************************************************************************
	* onClick event handler for the Attendees data table row
	*******************************************************************************************************/
	function OnDTRowClick(row) {
		var id = j$(row).find('input').first().val();
		selectContactIdAttendee(id, true);
	}
			
</script>
 	
    <style>
	    .Error { color: red; font-weight: strong;}
    </style>
 
   	<apex:sectionHeader title="Auction Check In" />
    <apex:form id="frmAll" >   	
    	<apex:outputPanel id="panelAll">	    
        <apex:pageBlock title="" mode="edit" >
     
            <apex:pageMessage summary="{!strSaveResults}" severity="info" strength="2" rendered="{!strSaveResults!=null}" />  
            <apex:messages styleClass="Error" />              

            <apex:pageBlockSection columns="1"  ShowHeader="false" id="pbsSearch" >
            	<apex:outputLabel value="Enter the Attendee Name or Table Captain Name" style="font-weight:bold;" />
            	
	    		<apex:pageBlockSectionItem >
	    			<apex:outputLabel value="Auction" for="lbxAuctions" />
			    	<apex:selectList value="{!auctionId}" size="1" id="lbxAuctions" >
			    		<apex:actionSupport event="onchange" status="retrieveStatus" action="{!ChangeAuction}" 
			    			rerender="panelAll" 
			    			oncomplete="auctionId='{!auctionId}'; listCaptains=null; myInitializeJQueryUI('{!strNameAttendee}','{!strNameCaptain}');" />			    			
			    		<apex:selectOptions value="{!listSOAuctions}" />
			    	</apex:selectList>	
				</apex:pageBlockSectionItem>
				            
                <apex:pageBlockSectionItem labelStyle="vertical-align:middle;" dataStyle="vertical-align:middle;">
		       		<apex:outputLabel value="Attendee" />
	                <apex:outputPanel >
					   	<input type="text" id="txtAttendees" class="clsCombo clsComboAttendees" /><button id="btnAttendeesAll" class="clsBtnAll" type="button" >&nbsp;</button>            
					    <apex:actionFunction action="{!ChangeAttendeeLookup}" name="ChangeAttendeeLookup" status="statusLoad" 
			    			rerender="panelAll" 
					    	oncomplete="myInitializeJQueryUI('{!strNameAttendee}','{!strNameCaptain}');" >
					        <apex:param name="param1" assignTo="{!contactIdAttendee}" value="" />
					    </apex:actionFunction>
	                </apex:outputPanel>
                </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem labelStyle="vertical-align:middle;" dataStyle="vertical-align:middle;">
		       		<apex:outputLabel value="Table Captain" />
                	<apex:outputPanel id="panelCaptains" >
					   	<input type="text" id="txtCaptains" class="clsCombo clsComboCaptains" /><button id="btnCaptainsAll" class="clsBtnAll" type="button" >&nbsp;</button>            
					    <apex:actionFunction action="{!ChangeCaptainLookup}" name="ChangeCaptainLookup" status="statusLoad" 
			    			rerender="panelAll" 
					    	oncomplete="myInitializeJQueryUI('{!strNameAttendee}','{!strNameCaptain}');" >
					        <apex:param name="param1" assignTo="{!contactIdCaptain}" value="" />
					    </apex:actionFunction>
		        		<apex:actionStatus startText="Loading..." stopText="" id="statusLoad" startStyle="color:green; font-style:italic" />
	        		</apex:outputPanel>	    	        		
                </apex:pageBlockSectionItem>
			</apex:pageBlockSection>
			
			<apex:outputPanel id="panelAttendees">
			<table cellpadding="10">
				<tr>
				<td style="vertical-align:top;" >
	            <apex:pageBlockSection title="Edit Attendee Information" columns="1" id="pbsEdit" rendered="{!contactIdAttendee!=null}" collapsible="true" >
	            	<apex:inputField value="{!attendeeEdit.con.FirstName}" required="false" /> 
	            	<apex:inputField value="{!attendeeEdit.con.LastName}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.con.Email}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.con.MailingStreet}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.con.MailingCity}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.con.MailingState}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.con.MailingPostalCode}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.con.Phone}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.cm.Meal_Preference__c}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.cm.Bid_Number__c}" required="false" />
	            	<apex:inputField value="{!attendeeEdit.cm.Table_Captain__c}" required="false" />
	            	<apex:pageBlockSectionItem >
	            		<apex:outputLabel value="Table&nbsp;Name/Number" escape="false" />  <!--  explicitly output label to force wider col width for labels! -->
		            	<apex:inputField value="{!attendeeEdit.cm.Table_Name_Number__c}" required="false" />
	            	</apex:pageBlockSectionItem>
					<apex:inputField value="{!attendeeEdit.cm.Paid__c}" required="false" />
	            </apex:pageBlockSection>  
	            
	            <apex:pageBlockSection title="Tickets" columns="1" id="pbsTicket" rendered="{!contactIdAttendee!=null}" collapsible="false" >
	            	<apex:pageBlockSectionItem >
	            		<apex:outputLabel value="Add&nbsp;Ticket&nbsp;Purchase" escape="false" />
	            		<apex:inputCheckbox value="{!fAddTicketPurchase}" /> 
	            	</apex:pageBlockSectionItem>
	           		<apex:inputField value="{!oppTicketAttendee.Amount}" required="false" style="width:50px" />
	           		<apex:inputField value="{!oppTicketAttendee.Number_of_Tickets__c}" required="false" style="width:50px" />
	            </apex:pageBlockSection>     	            
	            
	   				<br/>
					&nbsp;&nbsp;&nbsp;&nbsp;
					<apex:commandButton value="Save Attendee" rendered="{!contactIdAttendee!=null}" action="{!SaveAttendeeInfo}" 
		    			rerender="panelAll" 						
				    	oncomplete="myInitializeJQueryUI('{!strNameAttendee}','{!strNameCaptain}');" />
					<apex:commandButton value="Authorize Credit Card" rendered="{!contactIdAttendee!=null}" />&nbsp;&nbsp;
					<apex:commandButton value="Close" action="{!Close}" immediate="true" />	
					<br/>														       
        				
				</td> 
				<td style="vertical-align:top;" >
					<hr/>
					contactIdAttendee: {!contactIdAttendee}, {!strNameAttendee} - contactIdCaptain: {!contactIdCaptain}, {!strNameCaptain}
					<hr/>	
				    <apex:actionFunction action="{!ChangeAttendeeSelected}" name="ChangeAttendeeSelected"  status="statusLoad" 
		    			rerender="panelAll" 						
				    	oncomplete="myInitializeJQueryUI('{!strNameAttendee}','{!strNameCaptain}');" >
				        <apex:param name="param1" assignTo="{!contactIdAttendee}" value="" />
				    </apex:actionFunction>					
		            <apex:pageBlockSection title="Attendees" columns="1" id="pbsAttendees" rendered="{!contactIdCaptain!=null}" collapsible="true" >
						<apex:dataTable value="{!listAttendees}" var="attendee" rules="all"  cellpadding="2" 
							rowClasses="clsDTEven,clsDTOdd" onRowClick="OnDTRowClick(this); return false;"
							headerClass="clsDTHeader" >	
							<apex:column headerValue=" " >
								<apex:outputPanel rendered="{!attendee.cm.contactId!=contactIdAttendee}" >	
									<input type="radio" name="radioGrpContact" id="radio{!attendee.cm.contactId}" value="{!attendee.cm.contactId}" 
										onclick="selectContactIdAttendee('{!attendee.cm.contactId}', true);" />
								</apex:outputPanel>
								<apex:outputPanel rendered="{!attendee.cm.contactId==contactIdAttendee}" >	
									<input type="radio" name="radioGrpContact" id="radio{!attendee.cm.contactId}" value="{!attendee.cm.contactId}" checked="checked" />
								</apex:outputPanel>
							</apex:column>														
							<apex:column >
								<apex:facet name="header">Contact<br/>&nbsp;</apex:facet>
								<span class="clsAttendeeLink">
									<apex:outputField value="{!attendee.cm.contactId}" rendered="{!attendee.con.Id != null}" />
									<apex:commandLink value="new" rendered="{!attendee.con.Id == null}" />
								</span>
							</apex:column>					
							<apex:column style="text-align:center;">
								<apex:facet name="header">Bid Number</apex:facet>
								<apex:outputField value="{!attendee.cm.Bid_Number__c}"  style="width:50px"  />
							</apex:column> 
							<apex:column style="text-align:center;">					
								<apex:facet name="header">Table Name/Number</apex:facet>
								<apex:outputField id="txtTableNameNumber" value="{!attendee.cm.Table_Name_Number__c}" />
							</apex:column>
							<apex:column style="text-align:center;">					
								<apex:facet name="header">Meal Preference</apex:facet>
								<apex:outputField value="{!attendee.cm.Meal_Preference__c}" />
							</apex:column>
							<apex:column style="text-align:center;">
								<apex:facet name="header">&nbsp;&nbsp;Paid&nbsp;&nbsp;</apex:facet>
								<apex:inputCheckbox value="{!attendee.cm.Paid__c}" required="false" disabled="true" />
							</apex:column>
						</apex:dataTable>	
		            </apex:pageBlockSection>
		        </td>
				</tr>
			</table>
			</apex:outputPanel>			            


        </apex:pageBlock>
        </apex:outputPanel>
    </apex:form>
</apex:page>